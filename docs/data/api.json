{
  "Enums": [
    {
      "Name": "naos_scope_t",
      "Description": "The messages scopes. ",
      "Values": [
        {
          "Name": "NAOS_LOCAL",
          "Description": "The local scope denotes messages that are transferred under the configured base topic of the device. "
        },
        {
          "Name": "NAOS_GLOBAL",
          "Description": "The global scope denotes messages that are transferred on a global level. "
        }
      ]
    },
    {
      "Name": "naos_status_t",
      "Description": "The system statuses. ",
      "Values": [
        {
          "Name": "NAOS_DISCONNECTED",
          "Description": "Device is disconnected. "
        },
        {
          "Name": "NAOS_CONNECTED",
          "Description": "The device is connected to a WiFi access point. "
        },
        {
          "Name": "NAOS_NETWORKED",
          "Description": "The device is networked with a MQTT broker. "
        }
      ]
    },
    {
      "Name": "naos_type_t",
      "Description": "The parameter types. ",
      "Values": [
        {
          "Name": "NAOS_STRING",
          "Description": "A string parameter. "
        },
        {
          "Name": "NAOS_BOOL",
          "Description": "A boolean parameter. "
        },
        {
          "Name": "NAOS_LONG",
          "Description": "A long parameter. "
        },
        {
          "Name": "NAOS_DOUBLE",
          "Description": "A double parameter. "
        }
      ]
    }
  ],
  "Functions": [
    {
      "Definition": "const char * naos_scope_str(naos_scope_t scope)",
      "Name": "naos_scope_str",
      "Type": "const char *",
      "Description": "Get the string representation of the specified scope.",
      "Note": null,
      "Params": [
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "The string value. "
    },
    {
      "Definition": "const char * naos_status_str(naos_status_t status)",
      "Name": "naos_status_str",
      "Type": "const char *",
      "Description": "Get the string representation of the specified status.",
      "Note": null,
      "Params": [
        {
          "Name": "status",
          "Description": "The status. ",
          "Type": "naos_status_t"
        }
      ],
      "Returns": "The string value. "
    },
    {
      "Definition": "void naos_init(naos_config_t *config)",
      "Name": "naos_init",
      "Type": "void",
      "Description": "Initialize the system.",
      "Note": "Should only be called once on boot.",
      "Params": [
        {
          "Name": "config",
          "Description": "The configuration object. ",
          "Type": "naos_config_t *"
        }
      ],
      "Returns": null
    },
    {
      "Definition": "void naos_log(const char *fmt, ...)",
      "Name": "naos_log",
      "Type": "void",
      "Description": "The message will be printed to the serial port and published to the broker if logging is activated.",
      "Note": null,
      "Params": [
        {
          "Name": "fmt",
          "Description": "The message format. ",
          "Type": "const char *"
        },
        {
          "Name": "...",
          "Description": "The used arguments. ",
          "Type": "..."
        }
      ],
      "Returns": null
    },
    {
      "Definition": "char * naos_get(const char *param)",
      "Name": "naos_get",
      "Type": "char *",
      "Description": "Will return the value of the requested parameter. It will return an empty string for not set parameters.",
      "Note": "The returned pointer is only valid until the next call.",
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        }
      ],
      "Returns": "Pointer to value. "
    },
    {
      "Definition": "bool naos_get_b(const char *param)",
      "Name": "naos_get_b",
      "Type": "bool",
      "Description": "Will return the value of the requested parameter.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        }
      ],
      "Returns": "The value. "
    },
    {
      "Definition": "int32_t naos_get_l(const char *param)",
      "Name": "naos_get_l",
      "Type": "int32_t",
      "Description": "Will return the value of the requested parameter.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        }
      ],
      "Returns": "The value. "
    },
    {
      "Definition": "double naos_get_d(const char *param)",
      "Name": "naos_get_d",
      "Type": "double",
      "Description": "Will return the value of the requested parameter.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        }
      ],
      "Returns": "The value. "
    },
    {
      "Definition": "void naos_set(const char *param, const char *value)",
      "Name": "naos_set",
      "Type": "void",
      "Description": "Will set the value of the requested parameter. Synchronized parameters are automatically updated.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "const char *"
        }
      ],
      "Returns": null
    },
    {
      "Definition": "void naos_set_b(const char *param, bool value)",
      "Name": "naos_set_b",
      "Type": "void",
      "Description": "Will set the value of the requested parameter. Synchronized parameters are automatically updated.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "bool"
        }
      ],
      "Returns": null
    },
    {
      "Definition": "void naos_set_l(const char *param, int32_t value)",
      "Name": "naos_set_l",
      "Type": "void",
      "Description": "Will set the value of the requested parameter. Synchronized parameters are automatically updated.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "int32_t"
        }
      ],
      "Returns": null
    },
    {
      "Definition": "void naos_set_d(const char *param, double value)",
      "Name": "naos_set_d",
      "Type": "void",
      "Description": "Will set the value of the requested parameter. Synchronized parameters are automatically updated.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "double"
        }
      ],
      "Returns": null
    },
    {
      "Definition": "bool naos_ensure(const char *param, const char *value)",
      "Name": "naos_ensure",
      "Type": "bool",
      "Description": "Ensure a default value of a parameter if it is missing.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "const char *"
        }
      ],
      "Returns": "Whether the parameter was set. "
    },
    {
      "Definition": "bool naos_ensure_b(const char *param, bool value)",
      "Name": "naos_ensure_b",
      "Type": "bool",
      "Description": "Ensure a default value of a parameter if it is missing.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "bool"
        }
      ],
      "Returns": "Whether the parameter was set. "
    },
    {
      "Definition": "bool naos_ensure_l(const char *param, int32_t value)",
      "Name": "naos_ensure_l",
      "Type": "bool",
      "Description": "Ensure a default value of a parameter if it is missing.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "int32_t"
        }
      ],
      "Returns": "Whether the parameter was set. "
    },
    {
      "Definition": "bool naos_ensure_d(const char *param, double value)",
      "Name": "naos_ensure_d",
      "Type": "bool",
      "Description": "Ensure a default value of a parameter if it is missing.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "value",
          "Description": "The value. ",
          "Type": "double"
        }
      ],
      "Returns": "Whether the parameter was set. "
    },
    {
      "Definition": "bool naos_unset(const char *param)",
      "Name": "naos_unset",
      "Type": "bool",
      "Description": "Will unset the requested parameter. Synchronized parameters are automatically updated.",
      "Note": null,
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        }
      ],
      "Returns": "Whether the parameter was unset. "
    },
    {
      "Definition": "bool naos_sync(const char *param, char **pointer)",
      "Name": "naos_sync",
      "Type": "bool",
      "Description": "Will automatically apply parameter modifications and set the specified pointer to a buffer that contains the set value or an empty string if unset. It will read and set the currently stored value when invoked.",
      "Note": "This function should only be called from app_main() to ensure only one synchronization is registered per parameter.",
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "pointer",
          "Description": "The pointer. ",
          "Type": "char **"
        }
      ],
      "Returns": "Whether the registration was successful. "
    },
    {
      "Definition": "bool naos_sync_b(const char *param, bool *pointer)",
      "Name": "naos_sync_b",
      "Type": "bool",
      "Description": "Will automatically apply parameter modifications and set the specified pointer to the set value. It will read and set the currently stored value when invoked.",
      "Note": "This function should only be called from app_main() to ensure only one synchronization is registered per parameter.",
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "pointer",
          "Description": "The pointer. ",
          "Type": "bool *"
        }
      ],
      "Returns": "Whether the registration was successful. "
    },
    {
      "Definition": "bool naos_sync_l(const char *param, int32_t *pointer)",
      "Name": "naos_sync_l",
      "Type": "bool",
      "Description": "Will automatically apply parameter modifications and set the specified pointer to the set value. It will read and set the currently stored value when invoked.",
      "Note": "This function should only be called from app_main() to ensure only one synchronization is registered per parameter.",
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "pointer",
          "Description": "The pointer. ",
          "Type": "int32_t *"
        }
      ],
      "Returns": "Whether the registration was successful. "
    },
    {
      "Definition": "bool naos_sync_d(const char *param, double *pointer)",
      "Name": "naos_sync_d",
      "Type": "bool",
      "Description": "Will automatically apply parameter modifications and set the specified pointer to the set value. It will read and set the currently stored value when invoked.",
      "Note": "This function should only be called from app_main() to ensure only one synchronization is registered per parameter.",
      "Params": [
        {
          "Name": "param",
          "Description": "The parameter. ",
          "Type": "const char *"
        },
        {
          "Name": "pointer",
          "Description": "The pointer. ",
          "Type": "double *"
        }
      ],
      "Returns": "Whether the registration was successful. "
    },
    {
      "Definition": "bool naos_subscribe(const char *topic, int qos, naos_scope_t scope)",
      "Name": "naos_subscribe",
      "Type": "bool",
      "Description": "Subscribe to specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "qos",
          "Description": "The QoS level. ",
          "Type": "int"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "bool naos_unsubscribe(const char *topic, naos_scope_t scope)",
      "Name": "naos_unsubscribe",
      "Type": "bool",
      "Description": "Unsubscribe from specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "bool naos_publish(const char *topic, const char *payload, int qos, bool retained, naos_scope_t scope)",
      "Name": "naos_publish",
      "Type": "bool",
      "Description": "Publish to the specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "payload",
          "Description": "The payload. ",
          "Type": "const char *"
        },
        {
          "Name": "qos",
          "Description": "The QoS level. ",
          "Type": "int"
        },
        {
          "Name": "retained",
          "Description": "The retained flag. ",
          "Type": "bool"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "bool naos_publish_b(const char *topic, bool payload, int qos, bool retained, naos_scope_t scope)",
      "Name": "naos_publish_b",
      "Type": "bool",
      "Description": "Publish to the specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "payload",
          "Description": "The payload. ",
          "Type": "bool"
        },
        {
          "Name": "qos",
          "Description": "The QoS level. ",
          "Type": "int"
        },
        {
          "Name": "retained",
          "Description": "The retained flag. ",
          "Type": "bool"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "bool naos_publish_l(const char *topic, int32_t payload, int qos, bool retained, naos_scope_t scope)",
      "Name": "naos_publish_l",
      "Type": "bool",
      "Description": "Publish to the specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "payload",
          "Description": "The payload. ",
          "Type": "int32_t"
        },
        {
          "Name": "qos",
          "Description": "The QoS level. ",
          "Type": "int"
        },
        {
          "Name": "retained",
          "Description": "The retained flag. ",
          "Type": "bool"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "bool naos_publish_d(const char *topic, double payload, int qos, bool retained, naos_scope_t scope)",
      "Name": "naos_publish_d",
      "Type": "bool",
      "Description": "Publish to the specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "payload",
          "Description": "The payload. ",
          "Type": "double"
        },
        {
          "Name": "qos",
          "Description": "The QoS level. ",
          "Type": "int"
        },
        {
          "Name": "retained",
          "Description": "The retained flag. ",
          "Type": "bool"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "bool naos_publish_r(const char *topic, void *payload, size_t len, int qos, bool retained, naos_scope_t scope)",
      "Name": "naos_publish_r",
      "Type": "bool",
      "Description": "Publish to the specified topic. The topic is automatically prefixed with the configured base topic if the scope is local.",
      "Note": null,
      "Params": [
        {
          "Name": "topic",
          "Description": "The topic. ",
          "Type": "const char *"
        },
        {
          "Name": "payload",
          "Description": "The payload. ",
          "Type": "void *"
        },
        {
          "Name": "len",
          "Description": "The payload length. ",
          "Type": "size_t"
        },
        {
          "Name": "qos",
          "Description": "The QoS level. ",
          "Type": "int"
        },
        {
          "Name": "retained",
          "Description": "The retained flag. ",
          "Type": "bool"
        },
        {
          "Name": "scope",
          "Description": "The scope. ",
          "Type": "naos_scope_t"
        }
      ],
      "Returns": "Whether the command was successful. "
    },
    {
      "Definition": "uint32_t naos_millis()",
      "Name": "naos_millis",
      "Type": "uint32_t",
      "Description": "Returns the elapsed milliseconds since the start.",
      "Note": null,
      "Params": [],
      "Returns": "The elapsed milliseconds. "
    },
    {
      "Definition": "void naos_delay(uint32_t ms)",
      "Name": "naos_delay",
      "Type": "void",
      "Description": "Will delay current task for the specified amount of milliseconds.",
      "Note": "This function should only be used inside the loop callback.",
      "Params": [
        {
          "Name": "ms",
          "Description": "The amount of milliseconds to delay. ",
          "Type": "uint32_t"
        }
      ],
      "Returns": null
    }
  ],
  "Structs": [
    {
      "Name": "naos_config_t",
      "Description": "The main configuration object. ",
      "Fields": [
        {
          "Kind": "variable",
          "Definition": "const char * device_type",
          "Type": "const char *",
          "Name": "device_type",
          "Description": "The device type. "
        },
        {
          "Kind": "variable",
          "Definition": "const char * firmware_version",
          "Type": "const char *",
          "Name": "firmware_version",
          "Description": "The firmware version. "
        },
        {
          "Kind": "variable",
          "Definition": "naos_param_t * parameters",
          "Type": "naos_param_t *",
          "Name": "parameters",
          "Description": "The managed parameters. "
        },
        {
          "Kind": "variable",
          "Definition": "size_t num_parameters",
          "Type": "size_t",
          "Name": "num_parameters",
          "Description": "The number of managed parameters. "
        },
        {
          "Kind": "function",
          "Definition": "void(*ping_callback)()",
          "Type": "void",
          "Name": "ping_callback",
          "Description": "The callback that is called when a ping is received. ",
          "Params": [],
          "Returns": null
        },
        {
          "Kind": "function",
          "Definition": "void(*online_callback)()",
          "Type": "void",
          "Name": "online_callback",
          "Description": "The callback that is called once the device comes online. ",
          "Params": [],
          "Returns": null
        },
        {
          "Kind": "function",
          "Definition": "void(*update_callback)(const char *param, const char *value)",
          "Type": "void",
          "Name": "update_callback",
          "Description": "The callback that is called when a parameter has been updated. If the parameter was set, value is the string value. If the parameter was unset, value is NULL.",
          "Params": [
            {
              "Name": "param",
              "Description": "The parameter. ",
              "Type": "const char *"
            },
            {
              "Name": "value",
              "Description": "The value. ",
              "Type": "const char *"
            }
          ],
          "Returns": null
        },
        {
          "Kind": "function",
          "Definition": "void(*message_callback)(const char *topic, uint8_t *payload, size_t len, naos_scope_t scope)",
          "Type": "void",
          "Name": "message_callback",
          "Description": "The message callback is called with incoming messages.",
          "Params": [
            {
              "Name": "topic",
              "Description": "The topic. ",
              "Type": "const char *"
            },
            {
              "Name": "payload",
              "Description": "The payload. ",
              "Type": "uint8_t *"
            },
            {
              "Name": "len",
              "Description": "The payload length. ",
              "Type": "size_t"
            },
            {
              "Name": "scope",
              "Description": "The scope. ",
              "Type": "naos_scope_t"
            }
          ],
          "Returns": null
        },
        {
          "Kind": "function",
          "Definition": "void(*loop_callback)()",
          "Type": "void",
          "Name": "loop_callback",
          "Description": "The loop callback is called repeatedly if the device is online. ",
          "Params": [],
          "Returns": null
        },
        {
          "Kind": "variable",
          "Definition": "int loop_interval",
          "Type": "int",
          "Name": "loop_interval",
          "Description": "The interval of the loop callback in milliseconds. "
        },
        {
          "Kind": "function",
          "Definition": "void(*offline_callback)()",
          "Type": "void",
          "Name": "offline_callback",
          "Description": "The offline callback is called once the device becomes offline. ",
          "Params": [],
          "Returns": null
        },
        {
          "Kind": "function",
          "Definition": "void(*status_callback)(naos_status_t status)",
          "Type": "void",
          "Name": "status_callback",
          "Description": "The callback is called once the device has changed its status.",
          "Params": [
            {
              "Name": "status",
              "Description": "The status. ",
              "Type": "naos_status_t"
            }
          ],
          "Returns": null
        },
        {
          "Kind": "function",
          "Definition": "float(*battery_level)()",
          "Type": "float",
          "Name": "battery_level",
          "Description": "This callback is called to retrieve battery information. It should be provided if the device has a battery power source.",
          "Params": [],
          "Returns": "A value between 0 and 1 indicating the battery charge level. "
        },
        {
          "Kind": "variable",
          "Definition": "bool delay_startup",
          "Type": "bool",
          "Name": "delay_startup",
          "Description": "If set, the device will randomly (up to 5s) delay startup to overcome WiFi and MQTT congestion issues if many devices restart at the same time. "
        }
      ]
    },
    {
      "Name": "naos_param_t",
      "Description": "A single parameter. ",
      "Fields": [
        {
          "Kind": "variable",
          "Definition": "const char * name",
          "Type": "const char *",
          "Name": "name",
          "Description": "The name of the parameter e.g. \"my-param\". "
        },
        {
          "Kind": "variable",
          "Definition": "naos_type_t type",
          "Type": "naos_type_t",
          "Name": "type",
          "Description": "The parameter type. "
        },
        {
          "Kind": "variable",
          "Definition": "const char * default_s",
          "Type": "const char *",
          "Name": "default_s",
          "Description": "The default string value. "
        },
        {
          "Kind": "variable",
          "Definition": "bool default_b",
          "Type": "bool",
          "Name": "default_b",
          "Description": "The default boolean value. "
        },
        {
          "Kind": "variable",
          "Definition": "int32_t default_l",
          "Type": "int32_t",
          "Name": "default_l",
          "Description": "The default long value. "
        },
        {
          "Kind": "variable",
          "Definition": "double default_d",
          "Type": "double",
          "Name": "default_d",
          "Description": "The default double value. "
        },
        {
          "Kind": "variable",
          "Definition": "char ** sync_s",
          "Type": "char **",
          "Name": "sync_s",
          "Description": "The synchronized string variable. "
        },
        {
          "Kind": "variable",
          "Definition": "bool * sync_b",
          "Type": "bool *",
          "Name": "sync_b",
          "Description": "The synchronized boolean variable. "
        },
        {
          "Kind": "variable",
          "Definition": "int32_t * sync_l",
          "Type": "int32_t *",
          "Name": "sync_l",
          "Description": "The synchronized long variable. "
        },
        {
          "Kind": "variable",
          "Definition": "double * sync_d",
          "Type": "double *",
          "Name": "sync_d",
          "Description": "The synchronized double variable. "
        }
      ]
    }
  ]
}